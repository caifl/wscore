using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Text;

namespace System
{
    /// <summary>
    ///    AutoGenerated resource class. Usage:
    ///
    ///        string s = SR.GetString(SR.MyIdenfitier);
    /// </summary>
    internal sealed class Res
    {
        static Res loader = null;
        //ResourceManager resources;
        private readonly Dictionary<string, string> resources = new Dictionary<string, string>();

        internal Res()
        {
            var ms = typeof(Res).Assembly.GetManifestResourceStream("WSCore.StringResouces.resources");
            ResourceReader reader = new ResourceReader(ms);

            var em = reader.GetEnumerator();
            while (em.MoveNext())
            {
                var key = em.Key;
                var v = em.Value;
                resources.Add(key.ToString(), v?.ToString());
            }

            //resources = new System.Resources.ResourceManager("XmlWebServices.Properties", Assembly.GetExecutingAssembly());
        }

        private static Res GetLoader()
        {
            if (loader == null)
                loader = new Res();
            return loader;
        }

        private static CultureInfo Culture
        {
            get { return null/*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal static string GetString(string name, params object[] args)
        {
            return GetString(Res.Culture, name, args);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal static string GetString(CultureInfo culture, string name, params object[] args)
        {
            Res sys = GetLoader();
            if (sys == null)
                return null;

            string res = name;

            //sys.resources.GetString(name, culture);
            sys.resources.TryGetValue(name, out res);

            System.Diagnostics.Debug.Assert(res != null, string.Format(CultureInfo.CurrentCulture, "String resource {0} not found.", new object[] { name }));
            if (args != null && args.Length > 0)
            {
                return string.Format(CultureInfo.CurrentCulture, res, args);
            }
            else
            {
                return res;
            }
        }

        internal static string GetString(string name)
        {
            return GetString(Res.Culture, name);
        }

        internal static string GetString(CultureInfo culture, string name)
        {
            Res sys = GetLoader();
            if (sys == null)
                return null;

            try
            {
                string res = name;
                //sys.resources.GetString(name, culture);
                sys.resources.TryGetValue(name, out res);
                System.Diagnostics.Debug.Assert(res != null, string.Format(CultureInfo.CurrentCulture, "String resource {0} not found.", new object[] { name }));
                return res;
            }
            catch
            {
                return name;
            }
        }

        // All these strings should be present in StringResources.resx
        internal const string indexMustBeBetweenAnd0Inclusive = "indexMustBeBetweenAnd0Inclusive";
        internal const string internalError0 = "internalError0";

        internal const string ClientProtocolTimeout = "ClientProtocolTimeout";
        internal const string TracePostWorkItemIn = "TracePostWorkItemIn";
        internal const string TracePostWorkItemOut = "TracePostWorkItemOut";
        internal const string WebServiceUser = "WebServiceUser";
        internal const string ClientProtocolCookieContainer = "ClientProtocolCookieContainer";
        internal const string ClientProtocolEncoding = "ClientProtocolEncoding";
        internal const string ClientProtocolUrl = "ClientProtocolUrl";
        internal const string MessageHasNoParts1 = "MessageHasNoParts1";

        internal const string WebAsyncTransaction = "WebAsyncTransaction";
        internal const string ThereIsNoSoapTransportImporterThatUnderstands1 = "ThereIsNoSoapTransportImporterThatUnderstands1";
        internal const string CodeRemarks = "CodeRemarks";

        internal const string ProtocolDoesNotAsyncSerialize= "ProtocolDoesNotAsyncSerialize";
        internal const string WebNullAsyncResultInEnd= "WebNullAsyncResultInEnd";
        internal const string CanTCallTheEndMethodOfAnAsyncCallMoreThan= "CanTCallTheEndMethodOfAnAsyncCallMoreThan";
        internal const string TheBindingNamedFromNamespaceWasNotFoundIn3= "TheBindingNamedFromNamespaceWasNotFoundIn3";
        internal const string DiscoveryIsNotPossibleBecauseTypeIsMissing1= "DiscoveryIsNotPossibleBecauseTypeIsMissing1";
        internal const string CodeGenSupportParameterAttributes= "CodeGenSupportParameterAttributes";
        internal const string CodeGenSupportReturnTypeAttributes= "CodeGenSupportReturnTypeAttributes";
        internal const string WebDescriptionHeaderAndBodyUseMismatch= "WebDescriptionHeaderAndBodyUseMismatch";
        internal const string WebUnknownEncodingStyle= "WebUnknownEncodingStyle";
        internal const string MissingMessage2= "MissingMessage2";
        internal const string MissingMessagePartForMessageFromNamespace3= "MissingMessagePartForMessageFromNamespace3";
        internal const string WebDescriptionPartTypeRequired= "WebDescriptionPartTypeRequired";
        internal const string WebDescriptionPartElementWarning= "WebDescriptionPartElementWarning";
        internal const string WebDescriptionPartElementRequired= "WebDescriptionPartElementRequired";
        internal const string WebDescriptionPartTypeWarning= "WebDescriptionPartTypeWarning";
        internal const string MissingSoapOperationBinding0= "MissingSoapOperationBinding0";
        internal const string MissingSoapBodyInputBinding0= "MissingSoapBodyInputBinding0";
        internal const string MissingSoapBodyOutputBinding0= "MissingSoapBodyOutputBinding0";
        internal const string CodeGenSupportReferenceParameters= "CodeGenSupportReferenceParameters";
        internal const string WebMissingHelpContext= "WebMissingHelpContext";
        internal const string StackTraceEnd= "StackTraceEnd";
        internal const string ThereWasAnErrorDuringAsyncProcessing= "ThereWasAnErrorDuringAsyncProcessing";
        internal const string WebClientBindingAttributeRequired= "WebClientBindingAttributeRequired";
        internal const string TraceCreateSerializer= "TraceCreateSerializer";
        internal const string WebNullReaderForMessage= "WebNullReaderForMessage";
        internal const string WebInvalidEnvelopeNamespace= "WebInvalidEnvelopeNamespace";
        internal const string TraceReadResponse= "TraceReadResponse";
        internal const string WebQNamePrefixUndefined= "WebQNamePrefixUndefined";
        internal const string NeedConcreteType= "NeedConcreteType";
        internal const string OnlyOneWebServiceBindingAttributeMayBeSpecified1= "OnlyOneWebServiceBindingAttributeMayBeSpecified1";
        internal const string WebConfigExtensionError= "WebConfigExtensionError";
        internal const string WebResponseBadXml= "WebResponseBadXml";
        internal const string WebNullAsyncResultInBegin= "WebNullAsyncResultInBegin";
        internal const string WebResponseContent= "WebResponseContent";
        internal const string TraceWriteRequest= "TraceWriteRequest";
        internal const string WebNullWriterForMessage= "WebNullWriterForMessage";
        internal const string WebInvalidMethodName= "WebInvalidMethodName";
        internal const string ElementTypeMustBeObjectOrSoapReflectedException= "ElementTypeMustBeObjectOrSoapReflectedException";
        internal const string AsyncDuplicateUserState= "AsyncDuplicateUserState";
        internal const string EachMessagePartInAUseLiteralMessageMustSpecify0= "EachMessagePartInAUseLiteralMessageMustSpecify0";
        internal const string TheEncodingIsNotSupported1= "TheEncodingIsNotSupported1";
        internal const string SpecifyingAnElementForUseEncodedMessageParts0= "SpecifyingAnElementForUseEncodedMessageParts0";
        internal const string EachMessagePartInAnUseEncodedMessageMustSpecify0= "EachMessagePartInAnUseEncodedMessageMustSpecify0";
        internal const string MissingHttpOperationElement0= "MissingHttpOperationElement0";
        internal const string NoInputMIMEFormatsWereRecognized0= "NoInputMIMEFormatsWereRecognized0";
        internal const string NoInputHTTPFormatsWereRecognized0= "NoInputHTTPFormatsWereRecognized0";
        internal const string NoOutputMIMEFormatsWereRecognized0= "NoOutputMIMEFormatsWereRecognized0";
        internal const string InitFailed= "InitFailed";
        internal const string ContractOverride= "ContractOverride";
        internal const string UnableToHandleRequest0= "UnableToHandleRequest0";
        internal const string EachMessagePartInRpcUseLiteralMessageMustSpecify0= "EachMessagePartInRpcUseLiteralMessageMustSpecify0";
        internal const string SpecifyingATypeForUseLiteralMessagesIs0= "SpecifyingATypeForUseLiteralMessagesIs0";
        internal const string SpecifyingATypeForUseLiteralMessagesIsAny= "SpecifyingATypeForUseLiteralMessagesIsAny";
        internal const string Missing2= "Missing2";
        internal const string WebMissingPath= "WebMissingPath";
        internal const string HelpGeneratorInternalError= "HelpGeneratorInternalError";
        internal const string FailedToHandleRequest0= "FailedToHandleRequest0";
        internal const string WebUnrecognizedRequestFormatUrl= "WebUnrecognizedRequestFormatUrl";
        internal const string WebUnrecognizedRequestFormat= "WebUnrecognizedRequestFormat";
        internal const string WireSignatureEmpty= "WireSignatureEmpty";
        internal const string OperationMissingBinding= "OperationMissingBinding";
        internal const string PortTypeOperationMissing= "PortTypeOperationMissing";
        internal const string OperationBinding= "OperationBinding";
        internal const string FaultBinding= "FaultBinding";
        internal const string BindingMultipleParts= "BindingMultipleParts";
        internal const string Binding= "Binding";
        internal const string Rxxxx= "Rxxxx";
        internal const string OutputElement= "OutputElement";
        internal const string InputElement= "InputElement";
        internal const string Fault= "Fault";
        internal const string HeaderFault= "HeaderFault";
        internal const string BindingInvalidAttribute= "BindingInvalidAttribute";
        internal const string Element= "Element";
        internal const string Port= "Port";
        internal const string BindingMissingAttribute= "BindingMissingAttribute";
        internal const string OperationFlowNotification= "OperationFlowNotification";
        internal const string OperationFlowSolicitResponse= "OperationFlowSolicitResponse";
        internal const string Operation= "Operation";
        internal const string Description= "Description";
        internal const string Part= "Part";
        internal const string UriValueRelative= "UriValueRelative";
        internal const string WireSignature= "WireSignature";
        internal const string BPConformanceHeaderFault= "BPConformanceHeaderFault";
        internal const string WsdlGenRpcLitAnonimousType= "WsdlGenRpcLitAnonimousType";
        internal const string TraceUrlReferrer= "TraceUrlReferrer";
        internal const string TraceUrl= "TraceUrl";
        internal const string TraceUserHostName= "TraceUserHostName";
        internal const string TraceUserHostAddress= "TraceUserHostAddress";
        internal const string TraceCallEnter= "TraceCallEnter";
        internal const string TraceCallEnterDetails= "TraceCallEnterDetails";
        internal const string TraceCallExit= "TraceCallExit";
        internal const string WebUnknownElement= "WebUnknownElement";
        internal const string WebUnknownAttribute = "WebUnknownAttribute";
        internal const string WebUnknownElement1 = "WebUnknownElement1";
        internal const string WebUnknownAttribute2 = "WebUnknownAttribute2";
        internal const string WebUnknownElement2= "WebUnknownElement2";
        internal const string WebUnknownAttribute3= "WebUnknownAttribute3";
        internal const string StreamDoesNotSeek= "StreamDoesNotSeek";
        internal const string StreamDoesNotRead= "StreamDoesNotRead";
        internal const string XmlSchemaNamedItem= "XmlSchemaNamedItem";
        internal const string XmlSchemaElementReference= "XmlSchemaElementReference";
        internal const string XmlSchemaAttributeReference= "XmlSchemaAttributeReference";
        internal const string XmlSchemaContentDef= "XmlSchemaContentDef";
        internal const string XmlSchemaItem= "XmlSchemaItem";
        internal const string XmlSchema= "XmlSchema";
        internal const string SchemaValidationError= "SchemaValidationError";
        internal const string SchemaValidationWarning= "SchemaValidationWarning";
        internal const string SchemaSyntaxErrorDetails= "SchemaSyntaxErrorDetails";
        internal const string WebReflectionErrorMethod= "WebReflectionErrorMethod";
        internal const string WebMultiplyDeclaredHeaderTypes= "WebMultiplyDeclaredHeaderTypes";
        internal const string WebHeaderMissing= "WebHeaderMissing";
        internal const string WebHeaderType= "WebHeaderType";
        internal const string TraceWriteResponse= "TraceWriteResponse";
        internal const string WebRequestUnableToProcess= "WebRequestUnableToProcess";
        internal const string WebExtensionError= "WebExtensionError";
        internal const string WebWsiContentTypeEncoding= "WebWsiContentTypeEncoding";
        internal const string WebTimeout= "WebTimeout";
        internal const string BothAndUseTheMessageNameUseTheMessageName3= "BothAndUseTheMessageNameUseTheMessageName3";
        internal const string ConfigKeyNotFoundInElementCollection= "ConfigKeyNotFoundInElementCollection";
        internal const string ConfigKeysDoNotMatch= "ConfigKeysDoNotMatch";
        internal const string TraceExceptionThrown= "TraceExceptionThrown";
        internal const string TraceExceptionCought= "TraceExceptionCought";
        internal const string TraceExceptionIgnored= "TraceExceptionIgnored";
        internal const string TraceExceptionDetails= "TraceExceptionDetails";
        internal const string WebDuplicateFormatExtension= "WebDuplicateFormatExtension";
        internal const string WebDuplicateOperationMessage= "WebDuplicateOperationMessage";
        internal const string WebDuplicateImport= "WebDuplicateImport";
        internal const string WebDuplicateMessage= "WebDuplicateMessage";
        internal const string WebDuplicatePort= "WebDuplicatePort";
        internal const string WebDuplicatePortType= "WebDuplicatePortType";
        internal const string WebDuplicateBinding= "WebDuplicateBinding";
        internal const string WebDuplicateService= "WebDuplicateService";
        internal const string WebDuplicateMessagePart= "WebDuplicateMessagePart";
        internal const string WebDuplicateOperationBinding= "WebDuplicateOperationBinding";
        internal const string WebDuplicateFaultBinding= "WebDuplicateFaultBinding";
        internal const string WebDuplicateOperation= "WebDuplicateOperation";
        internal const string WebDuplicateOperationFault= "WebDuplicateOperationFault";
        internal const string WebDuplicateUnknownElement= "WebDuplicateUnknownElement";
        internal const string WebInvalidRequestFormat= "WebInvalidRequestFormat";
        internal const string WebInvalidRequestFormatDetails= "WebInvalidRequestFormatDetails";
        internal const string WebSuppressedExceptionMessage= "WebSuppressedExceptionMessage";
        internal const string CannotRunInPartialTrustOutsideAspNet= "CannotRunInPartialTrustOutsideAspNet";
        internal const string WebHeaderStatic= "WebHeaderStatic";
        internal const string WebHeaderRead= "WebHeaderRead";
        internal const string WebHeaderWrite= "WebHeaderWrite";
        internal const string WebInvalidBindingName= "WebInvalidBindingName";
        internal const string MultipleBindingsWithSameName2= "MultipleBindingsWithSameName2";
        internal const string TypeIsMissingWebServiceBindingAttributeThat2= "TypeIsMissingWebServiceBindingAttributeThat2";
        internal const string WebRequestUnableToRead= "WebRequestUnableToRead";
        internal const string WebRequestContent= "WebRequestContent";
        internal const string WebMissingEnvelopeElement= "WebMissingEnvelopeElement";
        internal const string WebMissingBodyElement= "WebMissingBodyElement";
        internal const string WebMissingHeader= "WebMissingHeader";
        internal const string TraceReadRequest= "TraceReadRequest";
        internal const string TraceReadHeaders= "TraceReadHeaders";
        internal const string TraceWriteHeaders= "TraceWriteHeaders";
        internal const string WebBadOutParameter= "WebBadOutParameter";
        internal const string WebInOutParameter= "WebInOutParameter";
        internal const string WebAsyncMissingEnd= "WebAsyncMissingEnd";
        internal const string WebResultNotXml= "WebResultNotXml";
        internal const string OnlyOperationInputOrOperationOutputTypes= "OnlyOperationInputOrOperationOutputTypes";
        internal const string Invalid_priority_group_value= "Invalid_priority_group_value";
        internal const string OnlyXmlElementsOrTypesDerivingFromServiceDescriptionFormatExtension0= "OnlyXmlElementsOrTypesDerivingFromServiceDescriptionFormatExtension0";
        internal const string TheMethodsAndUseTheSameRequestElementAndSoapActionXmlns6= "TheMethodsAndUseTheSameRequestElementAndSoapActionXmlns6";
        internal const string TheMethodDoesNotHaveARequestElementEither1= "TheMethodDoesNotHaveARequestElementEither1";
        internal const string TheMethodsAndUseTheSameSoapActionWhenTheService3= "TheMethodsAndUseTheSameSoapActionWhenTheService3";
        internal const string TheMethodsAndUseTheSameRequestElementXmlns4= "TheMethodsAndUseTheSameRequestElementXmlns4";
        internal const string WebNoReturnValue= "WebNoReturnValue";
        internal const string WebCannotAccessValue= "WebCannotAccessValue";
        internal const string WebHttpHeader= "WebHttpHeader";
        internal const string TheRequestElementXmlnsWasNotRecognized2= "TheRequestElementXmlnsWasNotRecognized2";
        internal const string TheRootElementForTheRequestCouldNotBeDetermined0= "TheRootElementForTheRequestCouldNotBeDetermined0";
        internal const string UnableToHandleRequestActionRequired0= "UnableToHandleRequestActionRequired0";
        internal const string WebBothMethodAttrs= "WebBothMethodAttrs";
        internal const string WebBothServiceAttrs= "WebBothServiceAttrs";
        internal const string WebInvalidBindingPlacement= "WebInvalidBindingPlacement";
        internal const string WebOneWayOutParameters= "WebOneWayOutParameters";
        internal const string WebOneWayReturnValue= "WebOneWayReturnValue";
        internal const string WebDescriptionMissing= "WebDescriptionMissing";
        internal const string WebDescriptionTooManyMessages= "WebDescriptionTooManyMessages";
        internal const string WebNegativeValue= "WebNegativeValue";
        internal const string WebResponseKnownError= "WebResponseKnownError";
        internal const string WebResponseUnknownErrorEmptyBody= "WebResponseUnknownErrorEmptyBody";
        internal const string WebCannotUnderstandHeader= "WebCannotUnderstandHeader";
        internal const string WebHeaderInvalidMustUnderstand= "WebHeaderInvalidMustUnderstand";
        internal const string WebInvalidMethodNameCase= "WebInvalidMethodNameCase";
        internal const string WebMethodMissingParams= "WebMethodMissingParams";
        internal const string WebResponseUnknownError= "WebResponseUnknownError";
        internal const string WebDescriptionMissingItem= "WebDescriptionMissingItem";
        internal const string WebMissingCustomAttribute= "WebMissingCustomAttribute";
        internal const string WebBadStreamState= "WebBadStreamState";
        internal const string WebChangeTypeFailed= "WebChangeTypeFailed";
        internal const string WebHeaderInvalidRelay= "WebHeaderInvalidRelay";
        internal const string WebMultiDimArray= "WebMultiDimArray";
        internal const string WebTextMatchBadCaptureIndex= "WebTextMatchBadCaptureIndex";
        internal const string WebMethodStatic= "WebMethodStatic";
        internal const string RequiredXmlFormatExtensionAttributeIsMissing1= "RequiredXmlFormatExtensionAttributeIsMissing1";
        internal const string UnableToHandleRequestActionNotRecognized1= "UnableToHandleRequestActionNotRecognized1";
        internal const string WebMissingParameter= "WebMissingParameter";
        internal const string ElementTypeMustBeObjectOrSoapExtensionOrSoapReflectedException = "ElementTypeMustBeObjectOrSoapExtensionOrSoapReflectedException";
        internal const string TheSyntaxOfTypeMayNotBeExtended1 = "TheSyntaxOfTypeMayNotBeExtended1";
        internal const string WebCannotAccessValueStage = "WebCannotAccessValueStage";
        internal const string WhenUsingAMessageStyleOfParametersAsDocument0 = "WhenUsingAMessageStyleOfParametersAsDocument0";
        internal const string WebTextMatchBadGroupIndex = "WebTextMatchBadGroupIndex";
        internal const string WebConfigInvalidExtensionPriority = "WsdlInstanceValidationDetails";
        internal const string WebWsiViolation = "WebWsiViolation";
        internal const string WsdlInstanceValidationDetails = "WsdlInstanceValidationDetails";
        internal const string XmlLang = "XmlLang";
        internal const string WebHeaderOneWayOut = "WebHeaderOneWayOut";
        internal const string WebSchemaNotFound = "WebSchemaNotFound";
        internal const string ServiceDescriptionWasNotFound0 = "ServiceDescriptionWasNotFound0";

        internal const string ClientProtocolPreAuthenticate = "ClientProtocolPreAuthenticate";
        internal const string ClientProtocolAllowAutoRedirect = "ClientProtocolAllowAutoRedirect";
        internal const string ClientProtocolClientCertificates = "ClientProtocolClientCertificates";
        internal const string ClientProtocolEnableDecompression = "ClientProtocolEnableDecompression";
        internal const string ClientProtocolSoapVersion = "ClientProtocolSoapVersion";
        internal const string ClientProtocolUserAgent = "ClientProtocolUserAgent";
        
        internal const string WebServiceContext = "WebServiceContext";
        internal const string WebServiceSession = "WebServiceSession";
        internal const string WebServiceServer = "WebServiceServer";
        internal const string WebServiceSoapVersion = "WebServiceSoapVersion";
    }
}
